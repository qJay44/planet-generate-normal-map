#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba16f, binding = 2) writeonly uniform image2D image;

layout(binding = 0) uniform sampler2D heightmap0;
layout(binding = 1) uniform sampler2D heightmap1;
uniform float scale;

uniform vec2 offset;

ivec2 mapSize = imageSize(image) * ivec2(2, 1);

float getHeightmapValue(vec2 globalUV) {
  float idx = round(globalUV.x);
  vec2 uv = globalUV;
  uv.x = (uv.x - 0.5f) * 2.f * idx + uv.x * 2.f * (1.f - idx);

  float heightmaps[2] = float[2](
    texture(heightmap0, uv).r,
    texture(heightmap1, uv).r
  );

  return heightmaps[uint(idx)];
}

float getNeighbourHeight(ivec2 texCoord) {
  vec2 globalUV = vec2((texCoord + mapSize) % mapSize) / mapSize;
  return getHeightmapValue(globalUV);
}

void main() {
  // [6][7][8]
  // [3][4][5]
  // [0][1][2]

  ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy) + ivec2(offset);
  float tc6 = getNeighbourHeight(texCoord + ivec2(-1,  1));
  float tc7 = getNeighbourHeight(texCoord + ivec2( 0,  1));
  float tc8 = getNeighbourHeight(texCoord + ivec2( 1,  1));
  float tc3 = getNeighbourHeight(texCoord + ivec2(-1,  0));
  float tc4 = getNeighbourHeight(texCoord + ivec2( 0,  0));
  float tc5 = getNeighbourHeight(texCoord + ivec2( 1,  0));
  float tc0 = getNeighbourHeight(texCoord + ivec2(-1, -1));
  float tc1 = getNeighbourHeight(texCoord + ivec2( 0, -1));
  float tc2 = getNeighbourHeight(texCoord + ivec2( 1,  1));

  vec3 normal;
  normal.x = scale * -(tc2 - tc0 + 2.f * (tc5 - tc3) + tc8 - tc6);
  normal.y = scale * -(tc6 - tc0 + 2.f * (tc7 - tc1) + tc8 - tc2);
  normal.z = 1.f;
  normal = normalize(normal) * 0.5f + 0.5f;

  imageStore(image, texCoord - ivec2(offset), vec4(normal, tc4));
}

